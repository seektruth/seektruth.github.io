<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技术 | SeekTruth]]></title>
  <link href="/blog/categories/ji-zhu/atom.xml" rel="self"/>
  <link href="/"/>
  <updated>2016-07-10T12:30:13-04:00</updated>
  <id>/</id>
  <author>
    <name><![CDATA[SeekTruth]]></name>
    <email><![CDATA[seektruthalone@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript的对象与继承]]></title>
    <link href="/blog/2016/07/10/javascript-object/"/>
    <updated>2016-07-10T12:20:03-04:00</updated>
    <id>/blog/2016/07/10/javascript-object</id>
    <content type="html"><![CDATA[<p>JavaScript是我在C语言之后接触的第二门编程语言，大一暑假的时候在图书馆找了一本中国人写的<a href="https://www.amazon.cn/%E6%99%AE%E9%80%9A%E9%AB%98%E7%AD%89%E5%AD%A6%E6%A0%A1%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E8%82%B2-%E8%A7%84%E5%88%92%E6%95%99%E6%9D%90-JavaScript%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/dp/B00L8KB5OQ/ref=sr_1_fkmr0_1?ie=UTF8&amp;qid=1468070774&amp;sr=8-1-fkmr0&amp;keywords=javascript++%E7%8E%8B%E5%B0%8F%E7%A7%91%E5%AD%A6">JavaScript</a>程序设计来看。那个时候在编程方面几乎还是小白，再加上那本书根本没有提JavaScript的编程机制，又有一些误导性的话，一直以来对JavaScript有很深的误解，认为JavaScript只是一门在浏览器上运行的面向对象语言，值此文来写下JavaScript当中很具有迷惑性和容易误解的地方。当然限于作者水平有限，也没有什么开发经验，所以难免有疏漏之处，还望批评指正。</p>

<h2>JavaScript的对象</h2>

<h3>对象是什么</h3>

<p>JavaScript代码当中随处可见new关键字，很容易让人产生误解，认为JavaScript是Java一样是基于类继承的语言。但是事实并非如此，JavaScript当中并没有类，那JavaScript的对象不是类那又是什么呢？某种意义上说，JavaScript的对象就是Python当中的字典（哈希表），其实也就是类似这样的键值对：
<code>Javascript
me={
    "fisrtName" : "seek",
    "lastName" : "truth" ,
    "getName" : function(){
        return this.firstName+this.lastName; //this相当于指向这个对象的指针
    }
}
</code>
这是一个比较有误解性的地方，初次看到时候觉得有点无法理解，但仔细用一用还是觉得合理，我们既可以像Python一样用[]运算符来获取元素，也可以用.操作符来获取元素：</p>

<pre><code class="JavaScript">me.firstName // =&gt; seek
me["lastName"] //=&gt; truth
me.getName() // =&gt; seektruth
</code></pre>

<h3>new运算符</h3>

<p>既然JavaScript当中是没有类的，那么new运算符又是在干什么呢？这是JavaScript设计的最让人误解的地方之一。JavaScript是一门函数式编程语言，JavaScript当中函数是一等公民，JavaScript当中函数也是对象，函数对象在被创建的时候会被添加调用属性，比较坑的是JavaScript函数有两种调用方式，一种是加了new关键字的调用，一种是没有new关键字的调用，前者会返回一个对象，后者会返回return语句当中的内容。考虑下面的一段函数：</p>

<!--more-->


<pre><code class="JavaScript">function Obj(name){
    this.name=name;
    return name;
}
</code></pre>

<p>如果我们用new运算符来调用：
<code>
obj = new Obj("seektruth") //obj会是一个对象：{"name": "seektruth"}
</code>
如果我们直接调用：
<code>JavaScript
obj = Obj("seektruth") //obj会是一个字符串："seektruth"
</code></p>

<p>确实设计的挺坑的，我们在调用的时候需要分清楚是否需要使用new，一般来说需要用new关键字来调用的函数会采用大写开头。</p>

<p>还有更坑的是如果返回的返回值是一个对象：
<code>JavaScript
function Obj(name){
    this.name=name;
    return {};
}
</code>
这样无论我们是否用new运算符来调用都会返回return语句里的值：
<code>JavaScript
new Obj("seektruth") //=&gt; {}
Obj("seektruth") //=&gt; {}
</code>
设计的是什么鬼&hellip;&hellip;</p>

<h2>对象继承</h2>

<h3>原型</h3>

<p>前面已经说到过JavaScript当中是没有类的，那JavaScript又是怎么来实现继承的呢？答案是通过原型链。在JavaScript当中，每个对象都会有一个原型，在创建对象的时候，如果不加说明的话，对象继承的原型是Object.prototype,函数对象会继承Function.prototype(Function.prototype继承Object.prototype)：
<code>JavaScript
Object.prototype // =&gt; {}
Function.prototype // =&gt; [Function]
</code>
我们可以通过对象的<strong>proto</strong>熟悉来查看对象的原型：
<code>JavaScript
a={}
a.__proto__  // =&gt; {}
</code>
JavaScript通过指定对象的原型来实现继承，指定对象的原型主要有三种方式：
- 在构造函数当中指明原型
- 直接修改对象的<strong>proto</strong>属性
- 是利用Object.create函数</p>

<p>下面我们依次来看一看</p>

<h3>在构造函数当中指定原型</h3>

<p>我们可以在构造函数当中指定对象的原型：</p>

<pre><code class="JavaScript">me={
    "firstName" : "seek",
    "lastName" : "truth" ,
    "getName" : function(){
        return this.firstName+this.lastName; //this相当于指向这个对象的指针
    }
}

function Obj(name){
    this.firstName = name;
    this.__proto__ = me; //指定原型为me对象
}
</code></pre>

<p>指定了原型之后，我们新建了对象之后就可以访问原型的属性：
<code>JavaScript
obj = new Obj("foo"); // =&gt; { firstName: 'foo' }
obj.firstName // =&gt; foo
obj.lastName // =&gt; truth
obj.getName() // =&gt; "footruth"
</code></p>

<p>当访问一个对象的时候，首先会尝试在改对象当中寻找该属性，如果没有就回到原型当中寻找，直到Object.prototype。如果我们在新的对象当中重写了原型当中的属性（方法），那么实际使用的时候我们新写的属性（方法）会覆盖掉原型当中的定义，这有点像基于类的语言的函数重载。</p>

<p>注意如果原型me对象的lastname属性有改变，因为obj对象是在原型当中寻找属性，那么这个obj对象的lastname属性也会改变：</p>

<pre><code class="JavaScript">me.lastName = "me"
obj.lastName // =&gt; "me"
obj.getName() // =&gt;  "foome"
</code></pre>

<h3>直接改变对象的原型</h3>

<p>我们也可以直接指定（改变）对象的原型：</p>

<pre><code class="JavaScript">obj2 = {}
obj2.__proto__ = me
obj2.firstName // =&gt; seek
obj2.lastName // =&gt; "me"
obj2.getName() // =&gt;  "seekme"
</code></pre>

<h3>使用Object.create函数</h3>

<p>尽管说前两种方法可以解决问题，但是这两种写法并不优雅，因为JavaScript并不是基于类的语言，第一写法很容易给人以误解，<a href="https://www.amazon.cn/JavaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9-%E9%81%93%E6%A0%BC%E6%8B%89%E6%96%AF%E2%80%A2%E5%85%8B%E7%BD%97%E5%85%8B%E7%A6%8F%E5%BE%B7/dp/B0097CON2S/ref=sr_1_1?ie=UTF8&amp;qid=1468070819&amp;sr=8-1&amp;keywords=JavaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9">JavaScript语言精粹</a>的作者Crockford认为new就不应该出现在JavaScript语言当中，而推荐使用Object.create函数来基于原型来创建对象。Object.create函数的用法很简单：
<code>JavaScript
obj3 = Object.create(me) // 以me为原型创建新的对象
obj3.firstName // =&gt; seek
obj3.lastName // =&gt; "me"
obj3.getName() // =&gt;  "seekme"
</code>
<code>obj3 = Object.create(me)</code>与<code>obj2 = {};obj2.__proto__ = me</code>是等价的，但是前一种写法更优雅也更易于理解。</p>

<h2>总结</h2>

<p>JavaScript作为一门基于原型的，函数式的编程语言在设计上有很多优雅与强大之处，但同时又有很多糟粕和坑，正式如此，JavaScript也是被误解最多语言。学习了JavaScript的对象继承机制，感觉自己的水平还是大有长进的。</p>
]]></content>
  </entry>
  
</feed>
