<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SeekTruth]]></title>
  <link href="seektruth.github.io/atom.xml" rel="self"/>
  <link href="seektruth.github.io/"/>
  <updated>2016-10-28T22:32:45+08:00</updated>
  <id>seektruth.github.io/</id>
  <author>
    <name><![CDATA[SeekTruth]]></name>
    <email><![CDATA[seektruthalone@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈web开发]]></title>
    <link href="seektruth.github.io/blog/2016/10/28/web/"/>
    <updated>2016-10-28T21:58:48+08:00</updated>
    <id>seektruth.github.io/blog/2016/10/28/web</id>
    <content type="html"><![CDATA[<p>参考地址  <a href="http://seektruth.github.io/blog/2016/10/28/web/">http://seektruth.github.io/blog/2016/10/28/web/</a></p>

<h2>准备</h2>

<ul>
<li>一个好用的浏览器 chrome/Firefox</li>
<li>PHP开发环境  推荐<a href="https://www.apachefriends.org/index.html">XAMPP</a></li>
<li>好用的编辑器 Atom/sublime/VScode/PHPstorm</li>
</ul>


<!--more-->


<h2>参考资料推荐</h2>

<p>PHP:</p>

<ul>
<li><a href="https://book.douban.com/subject/20445413/">PHP与MySQL动态网站开发</a></li>
<li><a href="https://segmentfault.com/a/1190000000390457">y分钟速成PHP</a></li>
</ul>


<p>Java:</p>

<ul>
<li>编程语言： <a href="https://book.douban.com/subject/26880667/">Java核心技术卷一</a></li>
<li>JavaWeb： <a href="https://book.douban.com/subject/1942934/">Head first servlet and PHP</a></li>
<li>Spring框架： <a href="https://book.douban.com/subject/26767354/">Spring实战</a></li>
</ul>


<h2>10.29</h2>

<h3>HTTP basics</h3>

<p>关键概念：</p>

<p>IP地址 端口 URL HTTP报文 <em>HTTP状态码</em></p>

<p>HTTP方法： <em>get</em> <em>post</em></p>

<h3>PHP hello world &amp; PHP basic</h3>

<p>关键概念:</p>

<p>Apache PHP 变量 数组 循环 控制 输入输出</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最终幻想-王者之剑]]></title>
    <link href="seektruth.github.io/blog/2016/10/14/final-fantasy/"/>
    <updated>2016-10-14T01:53:29+08:00</updated>
    <id>seektruth.github.io/blog/2016/10/14/final-fantasy</id>
    <content type="html"><![CDATA[<p><img src="seektruth.github.io/images/final-fantancy0.jpg" alt="王者之剑" /></p>

<p>前两天看到内网上发出最终幻想-王者之剑的资源，迫不及待就下下来欣赏了。其实一起一直以来对最终幻想系列也还是听感兴趣的，试玩过lighting姐雷光那一部，大概是最终幻想13吧，觉得画质人设还是挺不错的，就是不喜欢那种回合制的战斗，打起来节奏太慢了，最后也就没有玩下去。</p>

<!--more-->


<p><img src="seektruth.github.io/images/lighting.jpg" alt="lighting" /></p>

<p>这次看到出来全CG的影片，自然是不会错过。看过之后，也基本上在我意料之中，画质确实做的很好，细节很逼真，但剧情确实差强人意，基本在我意料之中，很多情节也是很陈旧的套路，剧情感觉也有些漏洞，很多时候让人看的一头雾水。比如最开始我觉得会是女主角的角色，结果没多久就不明不白的死了。很多地方交代的也不怎么清楚，感觉就是很多地方不明不白的在打。影片想要营造一些悬念，但是因为再一些地方交代的不明白，所以总体比较失败。</p>

<p>当然剧情上的不足可能是因为王者之剑是最终幻想15的前传，所以挖了很多坑，最后也没有填上。尽管说剧情不能让人很满意，就冲着这个画质，看一看也是不错的。最后来一发男女主，公主真的好漂亮。</p>

<p><img src="seektruth.github.io/images/final-fantancy1.jpg" alt="公主" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[绿联平台开发的一些感想-一次失败的外包]]></title>
    <link href="seektruth.github.io/blog/2016/10/06/sentiment/"/>
    <updated>2016-10-06T21:43:55+08:00</updated>
    <id>seektruth.github.io/blog/2016/10/06/sentiment</id>
    <content type="html"><![CDATA[<p>现在回想起来，觉得当初就不应该去接这个项目，其实最初我就隐约感觉到这个项目会有这样一个结局，项目的会员系统和其他模块交给两个团队来写，最后叫我们来整合，无论如何这也是不合理的，最后把会员模块连使用的框架都不一样，感觉把这个项目包出来的人是多么的异想天开。再加上我们团队内部的交流沟通问题和技术水平问题，从一开始我也就不太看好这个项目。</p>

<p>说到底我当时为什么会接下这个项目，当然钱是一部分的原因，还有一个很重要的原因就是当时我急切想增加自己的项目经验，正是因为有着这样的想法，所以可能当时我有点失去理智，正如一个正想学英语的人遇到英语推销就很容易被忽悠进去，认得这种心里还真的是很奇怪。</p>

<!--more-->


<p>尽管说这个项目比较失败，但对我个人而言，得到的远比失去的多。我失去了什么，我失去的只是空忙活了很久然后没有收到钱，当我得到的，我有了较大型项目的开发经验，尽管代码也不多，大概几千行，也够在简历上吹一笔。项目越来越大，对代码复用、模块化，解耦也是有了更深刻的理解。还有就是熟悉了spring和mybatis框架，如果不是做这个项目，我可能永远也不会去学spring框架，就算学了也很可能学不会，所以尽管说这次外包没有拿到什么钱，但是在经验和技术上都有很大的收获。</p>

<p>确实在国庆的时候我已经很厌倦这个项目了，就这样结束也让我自己从中解脱出来，继而去搞一些别的感兴趣的事情，比如编译原理、操作系统、并发和图形变成。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;A better me&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[机动战士高达 第08ms小队]]></title>
    <link href="seektruth.github.io/blog/2016/08/31/08ms/"/>
    <updated>2016-08-31T01:32:50+08:00</updated>
    <id>seektruth.github.io/blog/2016/08/31/08ms</id>
    <content type="html"><![CDATA[<p><img src="seektruth.github.io/images/08ms.jpg" alt="08ms" /></p>

<p>暑假看的一部高达，年代比较久远了，它的年龄和我一样大，但是真的算是一部非常经典的作品了，b站上有高清的重置版，战争场面非常真实，没有各种主角耍帅，也没什么特别牛逼的机器，都是一些很朴素的MS。除了男主角的有些价值观比较中二，整部剧算是很不错了。剧情也不长，12集，也没什么什么毒性（我再黑高达seed）。</p>

<p>相比之下看过的另一部高达seed，毒性简直不要太强，主角各种耍帅，现在回想起来总算是明白为什么那么多人喜欢追偶像剧了，珍爱生命，远离偶像剧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[空之境界]]></title>
    <link href="seektruth.github.io/blog/2016/07/11/shiki/"/>
    <updated>2016-07-11T22:05:39+08:00</updated>
    <id>seektruth.github.io/blog/2016/07/11/shiki</id>
    <content type="html"><![CDATA[<p><img src="seektruth.github.io/images/ryougi_shiki-001.jpg" alt="shiki" /></p>

<p>断断续续一个学期，总算是把空之境界的剧场版给看完了，算起来已经是第三次看这个片了，前几次都没有怎么看懂。第一次大概是在高中的时候，看了第一章俯瞰风景，因为真个片不是顺序，而完全是乱序的，所以当时完全看不懂，于是就放弃了。</p>

<!--more-->


<p>第二次大概是在高三的时候吧，那个时候出了个新剪辑的TV版，是顺叙的，这一次坚持看完了，但因为TV版少了某些章节，所以也并没有很看懂。</p>

<p>从大二下开学开始，再度开始看，直到考试周的时候，终于把空之境界看完了。尽管说看的过程当中，有些地方也是很痛苦，比如矛盾螺旋那一章，完全采用碎片化的叙述方式。但看完之后确实觉得很值得回味，还有式姐简直是美如画啊。空境确实算是一部很不错的动漫，比高达seed这类满是套路而且毒性很大的偶像剧要好。</p>

<p>最后再来一张美如画的式姐</p>

<p><img src="seektruth.github.io/images/012.jpg" alt="shiki" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode题4]]></title>
    <link href="seektruth.github.io/blog/2016/07/11/leetcode4/"/>
    <updated>2016-07-11T21:49:54+08:00</updated>
    <id>seektruth.github.io/blog/2016/07/11/leetcode4</id>
    <content type="html"><![CDATA[<h2>问题表述</h2>

<p>题目意思很简单，就是寻找两个已经排序好的数组的中位数</p>

<p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p>

<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>

<p>Example 1:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nums1 = [1, 3]
</span><span class='line'>nums2 = [2]
</span><span class='line'>
</span><span class='line'>The median is 2.0</span></code></pre></td></tr></table></div></figure>


<p>Example 2:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nums1 = [1, 2]
</span><span class='line'>nums2 = [3, 4]
</span><span class='line'>
</span><span class='line'>The median is (2 + 3)/2 = 2.5</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h2>求解思路</h2>

<p>简单来看，只需要把两个数组归并一下就可以，尽管没有满足题目当中的算法复杂度的要求，但还是一次通过了</p>

<h2>Java代码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">findMedianSortedArrays</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[]</span> <span class="n">sorted</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">nums1</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="n">nums2</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">nums1</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="n">nums2</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">t</span><span class="o">++){</span>
</span><span class='line'>            <span class="n">sorted</span><span class="o">[</span><span class="n">t</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums1</span><span class="o">.</span><span class="na">length</span> <span class="o">?</span> <span class="o">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="n">nums2</span><span class="o">.</span><span class="na">length</span><span class="o">?</span>
</span><span class='line'>                    <span class="o">(</span><span class="n">nums1</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">nums2</span><span class="o">[</span><span class="n">k</span><span class="o">]?</span> <span class="n">nums1</span><span class="o">[</span><span class="n">i</span><span class="o">++]</span> <span class="o">:</span> <span class="n">nums2</span><span class="o">[</span><span class="n">k</span><span class="o">++])</span> <span class="o">:</span> <span class="n">nums1</span><span class="o">[</span><span class="n">i</span><span class="o">++])</span> <span class="o">:</span> <span class="n">nums2</span><span class="o">[</span><span class="n">k</span><span class="o">++];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sorted</span><span class="o">.</span><span class="na">length</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="o">(</span><span class="n">sorted</span><span class="o">[</span><span class="n">sorted</span><span class="o">.</span><span class="na">length</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">sorted</span><span class="o">[</span><span class="n">sorted</span><span class="o">.</span><span class="na">length</span><span class="o">/</span><span class="mi">2</span><span class="o">])/</span><span class="mf">2.0</span>
</span><span class='line'>                <span class="o">:</span> <span class="n">sorted</span><span class="o">[</span><span class="n">sorted</span><span class="o">.</span><span class="na">length</span><span class="o">/</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode题3]]></title>
    <link href="seektruth.github.io/blog/2016/07/11/leetcode3/"/>
    <updated>2016-07-11T21:42:41+08:00</updated>
    <id>seektruth.github.io/blog/2016/07/11/leetcode3</id>
    <content type="html"><![CDATA[<p>在第二篇第一篇博文当中已经说过，决定每天早上刷leetcode来保持状态，今天是leetcode的第三题</p>

<h2>问题表述</h2>

<p>题目意思比较简单，就是寻找不包含重复字符的最长子字符串</p>

<p>Given a string, find the length of the longest substring without repeating characters.</p>

<p>Examples:</p>

<p>Given &ldquo;abcabcbb&rdquo;, the answer is &ldquo;abc&rdquo;, which the length is 3.</p>

<p>Given &ldquo;bbbbb&rdquo;, the answer is &ldquo;b&rdquo;, with the length of 1.</p>

<p>Given &ldquo;pwwkew&rdquo;, the answer is &ldquo;wke&rdquo;, with the length of 3. Note that the answer must be a substring, &ldquo;pwke&rdquo; is a subsequence and not a substring.</p>

<p>Subscribe to see which companies asked this question</p>

<!--more-->


<h2>求解思路</h2>

<p>粗看这题并不难，最开始的想法是使用分而治之策略，但是细细思考之后，这个问题分是很容易的，但是合并却不是很容易，于是放弃了这种想法。</p>

<p>第二种想法是动态规划，看起来也确实是可行的，我最初也是用动态规划来实现的，但是在测试之后却发现有些测试用例有问题，调试了一下才发现动态规划的递推关系并没有我想象当中的简单,典型的就是没有想好就开始写程序，结果做了很多无用功。</p>

<p>最后我发现其实只要从左到右把字符串扫描一遍就可以找到结果。我们维护两个字符串，一个是当前最大的字符串，一个是当前的字符串，最初的时候这两个字符串都为空。每扫面一个字符，如果这个字符不在字符串当中，我们就把当前字符串加上这个字符。如果在，当前字符串就不能再往前加字符了，我们需要比较当前字符串和当前最大字符串。为了满足子字符串不能有重复元素的要求，我们需要把当前字符串的开始地址替换掉。如此扫面一遍，就能够得出结果。</p>

<h2>Java代码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">lengthOfLongestSubstring</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">){</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">max</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">current</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">pos</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">){</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="n">max</span><span class="o">.</span><span class="na">length</span><span class="o">()){</span>
</span><span class='line'>                    <span class="n">max</span> <span class="o">=</span> <span class="n">current</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">pos</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>                <span class="n">current</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">current</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">))+</span><span class="mi">1</span><span class="o">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>                <span class="n">start</span> <span class="o">=</span> <span class="n">start</span> <span class="o">+</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">else</span><span class="o">{</span>
</span><span class='line'>                <span class="n">current</span> <span class="o">=</span> <span class="n">current</span> <span class="o">+</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">max</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">current</span><span class="o">.</span><span class="na">length</span><span class="o">()?</span> <span class="n">max</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">:</span> <span class="n">current</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大二下总结]]></title>
    <link href="seektruth.github.io/blog/2016/07/11/2016-spring-summer/"/>
    <updated>2016-07-11T21:37:42+08:00</updated>
    <id>seektruth.github.io/blog/2016/07/11/2016-spring-summer</id>
    <content type="html"><![CDATA[<h2>总览</h2>

<p>总的来说，尽管还是有很多后悔和不足的地方，这个学期自己还是有很大的进步。因为寒假的时候颓废了一个月，这个学期刚开始的时候还是基本处于小白的阶段。经过一学期的学习，虽然对各个技术栈都没有达到比较熟悉的程度，但还是对整个行业的技术体系有了大致的概览，对自己将要走的路有了更清晰的认识。</p>

<h2>习惯</h2>

<p>非常不幸的是，这个学期并没有改正以前的一些坏习惯：</p>

<ol>
<li>作息不规律</li>
<li>撸</li>
<li>打游戏</li>
</ol>


<p>也并没有养成什么心得好习惯，很多事情也只是尝试了几天就放弃了：</p>

<ol>
<li>记日记</li>
<li>学英语</li>
<li>阅读</li>
</ol>


<!--more-->


<h2>阅读</h2>

<p>因为课程比较紧张，这个学期大概只完整读完了[HTTP权威指南]和[JavaScript语言精粹]两本书，HTTP权威指南还读的不是很认真，非技术类的书籍只读了[人类群星闪耀时]的一章，真是汗颜。</p>

<h2>编程</h2>

<p>这学期主要写了图书管理系统、远途网和miniSQL三个大程，图书管理系统我边自学node.js边写的，写的非常烂，只是熟悉了网站前后端基本原理和编程套路，倒也还算是大有收获。第二个远途网也是关于网站制作的，这一次因为是20人合作，所以语言用的是PHP，写的其实比较烂，但是跟第一次相比已经大大有提高，这一次继续熟悉网站架设的套路和前端的界面设计。miniSQL个人目前写的代码量最大的程序（超过1000行），其实写的也很烂，只是练习了较大型系统的架构。</p>

<h2>收获</h2>

<p>这个学期最大的收获还是快速学习能力，自己能够明显的感觉到自己学习新技术比以前更快了。也难怪这一学期都是在快速学习以应付各种事情，虽然这个学期自己看的书并没有上个学期多，但还是明显的感觉到自己这个学期的成长要比上个学期要多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript的对象与继承]]></title>
    <link href="seektruth.github.io/blog/2016/07/11/javascript-object/"/>
    <updated>2016-07-11T00:20:03+08:00</updated>
    <id>seektruth.github.io/blog/2016/07/11/javascript-object</id>
    <content type="html"><![CDATA[<p>JavaScript是我在C语言之后接触的第二门编程语言，大一暑假的时候在图书馆找了一本中国人写的<a href="https://www.amazon.cn/%E6%99%AE%E9%80%9A%E9%AB%98%E7%AD%89%E5%AD%A6%E6%A0%A1%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E8%82%B2-%E8%A7%84%E5%88%92%E6%95%99%E6%9D%90-JavaScript%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/dp/B00L8KB5OQ/ref=sr_1_fkmr0_1?ie=UTF8&amp;qid=1468070774&amp;sr=8-1-fkmr0&amp;keywords=javascript++%E7%8E%8B%E5%B0%8F%E7%A7%91%E5%AD%A6">JavaScript程序设计</a>来看。那个时候在编程方面几乎还是小白，再加上那本书根本没有提JavaScript的编程机制，又有一些误导性的话，一直以来对JavaScript有很深的误解，认为JavaScript只是一门在浏览器上运行的面向对象语言，值此文来写下JavaScript当中很具有迷惑性和容易误解的地方。当然限于作者水平有限，也没有什么开发经验，所以难免有疏漏之处，还望批评指正。</p>

<h2>JavaScript的对象</h2>

<h3>对象是什么</h3>

<p>JavaScript代码当中随处可见new关键字，很容易让人产生误解，认为JavaScript是Java一样是基于类继承的语言。但是事实并非如此，JavaScript当中并没有类，那JavaScript的对象不是类那又是什么呢？某种意义上说，JavaScript的对象就是Python当中的字典（哈希表），其实也就是类似这样的键值对：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="nx">me</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;fisrtName&quot;</span> <span class="o">:</span> <span class="s2">&quot;seek&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;lastName&quot;</span> <span class="o">:</span> <span class="s2">&quot;truth&quot;</span> <span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;getName&quot;</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span> <span class="c1">//this相当于指向这个对象的指针</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个比较有误解性的地方，初次看到时候觉得有点无法理解，但仔细用一用还是觉得合理，我们既可以像Python一样用[]运算符来获取元素，也可以用.操作符来获取元素：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">me</span><span class="p">.</span><span class="nx">firstName</span> <span class="c1">// =&gt; seek</span>
</span><span class='line'><span class="nx">me</span><span class="p">[</span><span class="s2">&quot;lastName&quot;</span><span class="p">]</span> <span class="c1">//=&gt; truth</span>
</span><span class='line'><span class="nx">me</span><span class="p">.</span><span class="nx">getName</span><span class="p">()</span> <span class="c1">// =&gt; seektruth</span>
</span></code></pre></td></tr></table></div></figure>


<h3>new运算符</h3>

<p>既然JavaScript当中是没有类的，那么new运算符又是在干什么呢？这是JavaScript设计的最让人误解的地方之一。JavaScript是一门函数式编程语言，JavaScript当中函数是一等公民，JavaScript当中函数也是对象，函数对象在被创建的时候会被添加调用属性，比较坑的是JavaScript函数有两种调用方式，一种是加了new关键字的调用，一种是没有new关键字的调用，前者会返回一个对象，后者会返回return语句当中的内容。考虑下面的一段函数：</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">function</span> <span class="nx">Obj</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们用new运算符来调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Obj</span><span class="p">(</span><span class="s2">&quot;seektruth&quot;</span><span class="p">)</span> <span class="c1">//obj会是一个对象：{&quot;name&quot;: &quot;seektruth&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们直接调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">obj</span> <span class="o">=</span> <span class="nx">Obj</span><span class="p">(</span><span class="s2">&quot;seektruth&quot;</span><span class="p">)</span> <span class="c1">//obj会是一个字符串：&quot;seektruth&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>确实设计的挺坑的，我们在调用的时候需要分清楚是否需要使用new，一般来说需要用new关键字来调用的函数会采用大写开头。</p>

<p>还有更坑的是如果返回的返回值是一个对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">function</span> <span class="nx">Obj</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样无论我们是否用new运算符来调用都会返回return语句里的值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="k">new</span> <span class="nx">Obj</span><span class="p">(</span><span class="s2">&quot;seektruth&quot;</span><span class="p">)</span> <span class="c1">//=&gt; {}</span>
</span><span class='line'><span class="nx">Obj</span><span class="p">(</span><span class="s2">&quot;seektruth&quot;</span><span class="p">)</span> <span class="c1">//=&gt; {}</span>
</span></code></pre></td></tr></table></div></figure>


<p>设计的是什么鬼&hellip;&hellip;</p>

<h2>对象继承</h2>

<h3>原型</h3>

<p>前面已经说到过JavaScript当中是没有类的，那JavaScript又是怎么来实现继承的呢？答案是通过原型链。在JavaScript当中，每个对象都会有一个原型，在创建对象的时候，如果不加说明的话，对象继承的原型是Object.prototype,函数对象会继承Function.prototype(Function.prototype继承Object.prototype)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// =&gt; {}</span>
</span><span class='line'><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// =&gt; [Function]</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以通过对象的<strong>proto</strong>熟悉来查看对象的原型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">a</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="nx">a</span><span class="p">.</span><span class="nx">__proto__</span>  <span class="c1">// =&gt; {}</span>
</span></code></pre></td></tr></table></div></figure>


<p>JavaScript通过指定对象的原型来实现继承，指定对象的原型主要有三种方式：
- 在构造函数当中指明原型
- 直接修改对象的<strong>proto</strong>属性
- 是利用Object.create函数</p>

<p>下面我们依次来看一看</p>

<h3>在构造函数当中指定原型</h3>

<p>我们可以在构造函数当中指定对象的原型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">me</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;firstName&quot;</span> <span class="o">:</span> <span class="s2">&quot;seek&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;lastName&quot;</span> <span class="o">:</span> <span class="s2">&quot;truth&quot;</span> <span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;getName&quot;</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span> <span class="c1">//this相当于指向这个对象的指针</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">Obj</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">me</span><span class="p">;</span> <span class="c1">//指定原型为me对象</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>指定了原型之后，我们新建了对象之后就可以访问原型的属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Obj</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span> <span class="c1">// =&gt; { firstName: &#39;foo&#39; }</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">firstName</span> <span class="c1">// =&gt; foo</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">lastName</span> <span class="c1">// =&gt; truth</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">getName</span><span class="p">()</span> <span class="c1">// =&gt; &quot;footruth&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当访问一个对象的时候，首先会尝试在改对象当中寻找该属性，如果没有就回到原型当中寻找，直到Object.prototype。如果我们在新的对象当中重写了原型当中的属性（方法），那么实际使用的时候我们新写的属性（方法）会覆盖掉原型当中的定义，这有点像基于类的语言的函数重载。</p>

<p>注意如果原型me对象的lastname属性有改变，因为obj对象是在原型当中寻找属性，那么这个obj对象的lastname属性也会改变：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">me</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="s2">&quot;me&quot;</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">lastName</span> <span class="c1">// =&gt; &quot;me&quot;</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">getName</span><span class="p">()</span> <span class="c1">// =&gt;  &quot;foome&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>直接改变对象的原型</h3>

<p>我们也可以直接指定（改变）对象的原型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">obj2</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="nx">obj2</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">me</span>
</span><span class='line'><span class="nx">obj2</span><span class="p">.</span><span class="nx">firstName</span> <span class="c1">// =&gt; seek</span>
</span><span class='line'><span class="nx">obj2</span><span class="p">.</span><span class="nx">lastName</span> <span class="c1">// =&gt; &quot;me&quot;</span>
</span><span class='line'><span class="nx">obj2</span><span class="p">.</span><span class="nx">getName</span><span class="p">()</span> <span class="c1">// =&gt;  &quot;seekme&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用Object.create函数</h3>

<p>尽管说前两种方法可以解决问题，但是这两种写法并不优雅，因为JavaScript并不是基于类的语言，第一写法很容易给人以误解，<a href="https://www.amazon.cn/JavaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9-%E9%81%93%E6%A0%BC%E6%8B%89%E6%96%AF%E2%80%A2%E5%85%8B%E7%BD%97%E5%85%8B%E7%A6%8F%E5%BE%B7/dp/B0097CON2S/ref=sr_1_1?ie=UTF8&amp;qid=1468070819&amp;sr=8-1&amp;keywords=JavaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9">JavaScript语言精粹</a>的作者Crockford认为new就不应该出现在JavaScript语言当中，而推荐使用Object.create函数来基于原型来创建对象。Object.create函数的用法很简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">obj3</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">me</span><span class="p">)</span> <span class="c1">// 以me为原型创建新的对象</span>
</span><span class='line'><span class="nx">obj3</span><span class="p">.</span><span class="nx">firstName</span> <span class="c1">// =&gt; seek</span>
</span><span class='line'><span class="nx">obj3</span><span class="p">.</span><span class="nx">lastName</span> <span class="c1">// =&gt; &quot;me&quot;</span>
</span><span class='line'><span class="nx">obj3</span><span class="p">.</span><span class="nx">getName</span><span class="p">()</span> <span class="c1">// =&gt;  &quot;seekme&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>obj3 = Object.create(me)</code>与<code>obj2 = {};obj2.__proto__ = me</code>是等价的，但是前一种写法更优雅也更易于理解。</p>

<h2>总结</h2>

<p>JavaScript作为一门基于原型的，函数式的编程语言在设计上有很多优雅与强大之处，但同时又有很多糟粕和坑，正式如此，JavaScript也是被误解最多语言。学习了JavaScript的对象继承机制，感觉自己的水平还是大有长进的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第二篇第一篇博文]]></title>
    <link href="seektruth.github.io/blog/2016/07/10/first/"/>
    <updated>2016-07-10T23:50:32+08:00</updated>
    <id>seektruth.github.io/blog/2016/07/10/first</id>
    <content type="html"><![CDATA[<p>上次弄这个博客网站已经是两个月前了，上次这个“第一篇博文”这篇文章写了之后就两个月没有再弄过这个网站。
这两个月自己还是不断陷入几个怪圈当中</p>

<h2>拖延</h2>

<p>总是喜欢把事情推到明天</p>

<h2>选择恐惧症</h2>

<ol>
<li>觉得技术A有点意思，需要搞一搞，做了一小半</li>
<li>觉得事情B也不错，放下事情A，搞事情B</li>
<li>觉得事情C也很有必要要搞一搞</li>
<li>结果A，B，C一样也没有搞定</li>
<li>陷入深深的自责，甚至开始怀疑人生</li>
<li>打游戏</li>
<li>觉得不能再怎么颓废下去，回到步骤A</li>
</ol>


<!--more-->


<h2>无法持续作为</h2>

<p>作为两三天之后总是会松懈，什么都不想干，或者去打游戏，或者就是坐在那里发呆，或者就是撸来撸去。就是无法持续的集中精力干一件事情。、</p>

<p>过去两个月，似乎自己总是很忙，好像干了很多事情，但又好像并没有收获，为了打破这种已经持续了两年的怪圈，我决定</p>

<ol>
<li>每天早上刷一道leetcode题，找到状态之后再学习</li>
<li>拒绝拖延，每天维护自己的博客/Wiki</li>
<li>集中精力，一段时间内只学习1到两门技术</li>
<li>早睡早起，戒撸，控制打游戏的时间</li>
</ol>


<p>最后还是希望自己能够坚持下去每天更新这个站</p>
]]></content>
  </entry>
  
</feed>
